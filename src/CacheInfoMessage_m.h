//
// Generated file, do not edit! Created by nedtool 5.2 from src/CacheInfoMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __CACHEINFOMESSAGE_M_H
#define __CACHEINFOMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"
#include "InfoEntry.h"
#include "FileEntry.h"
// }}

/**
 * Class generated from <tt>src/CacheInfoMessage.msg:29</tt> by nedtool.
 * <pre>
 * packet CacheInfoMessage extends WaveShortMessage
 * {
 *     InfoEntry info[];
 *     FileEntry file[];
 * }
 * </pre>
 */
class CacheInfoMessage : public ::WaveShortMessage
{
  protected:
    InfoEntry *info; // array ptr
    unsigned int info_arraysize;
    FileEntry *file; // array ptr
    unsigned int file_arraysize;

  private:
    void copy(const CacheInfoMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CacheInfoMessage&);

  public:
    CacheInfoMessage(const char *name=nullptr, short kind=0);
    CacheInfoMessage(const CacheInfoMessage& other);
    virtual ~CacheInfoMessage();
    CacheInfoMessage& operator=(const CacheInfoMessage& other);
    virtual CacheInfoMessage *dup() const override {return new CacheInfoMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setInfoArraySize(unsigned int size);
    virtual unsigned int getInfoArraySize() const;
    virtual InfoEntry& getInfo(unsigned int k);
    virtual const InfoEntry& getInfo(unsigned int k) const {return const_cast<CacheInfoMessage*>(this)->getInfo(k);}
    virtual void setInfo(unsigned int k, const InfoEntry& info);
    virtual void setFileArraySize(unsigned int size);
    virtual unsigned int getFileArraySize() const;
    virtual FileEntry& getFile(unsigned int k);
    virtual const FileEntry& getFile(unsigned int k) const {return const_cast<CacheInfoMessage*>(this)->getFile(k);}
    virtual void setFile(unsigned int k, const FileEntry& file);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CacheInfoMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CacheInfoMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CACHEINFOMESSAGE_M_H

