//
// Generated file, do not edit! Created by nedtool 5.2 from src/NetworkCodingMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __NETWORKCODINGMESSAGE_M_H
#define __NETWORKCODINGMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>src/NetworkCodingMessage.msg:26</tt> by nedtool.
 * <pre>
 * packet NetworkCodingMessage extends WaveShortMessage
 * {
 *     string packetId;
 *     long fileSize;
 *     int gen;
 *     int numBlocksGen;
 *     int blockSize;
 *     int codingNum;
 *     unsigned char coeffs[];
 *     unsigned char sums[];
 * }
 * </pre>
 */
class NetworkCodingMessage : public ::WaveShortMessage
{
  protected:
    ::omnetpp::opp_string packetId;
    long fileSize;
    int gen;
    int numBlocksGen;
    int blockSize;
    int codingNum;
    unsigned char *coeffs; // array ptr
    unsigned int coeffs_arraysize;
    unsigned char *sums; // array ptr
    unsigned int sums_arraysize;

  private:
    void copy(const NetworkCodingMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetworkCodingMessage&);

  public:
    NetworkCodingMessage(const char *name=nullptr, short kind=0);
    NetworkCodingMessage(const NetworkCodingMessage& other);
    virtual ~NetworkCodingMessage();
    NetworkCodingMessage& operator=(const NetworkCodingMessage& other);
    virtual NetworkCodingMessage *dup() const override {return new NetworkCodingMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getPacketId() const;
    virtual void setPacketId(const char * packetId);
    virtual long getFileSize() const;
    virtual void setFileSize(long fileSize);
    virtual int getGen() const;
    virtual void setGen(int gen);
    virtual int getNumBlocksGen() const;
    virtual void setNumBlocksGen(int numBlocksGen);
    virtual int getBlockSize() const;
    virtual void setBlockSize(int blockSize);
    virtual int getCodingNum() const;
    virtual void setCodingNum(int codingNum);
    virtual void setCoeffsArraySize(unsigned int size);
    virtual unsigned int getCoeffsArraySize() const;
    virtual unsigned char getCoeffs(unsigned int k) const;
    virtual void setCoeffs(unsigned int k, unsigned char coeffs);
    virtual void setSumsArraySize(unsigned int size);
    virtual unsigned int getSumsArraySize() const;
    virtual unsigned char getSums(unsigned int k) const;
    virtual void setSums(unsigned int k, unsigned char sums);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NetworkCodingMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NetworkCodingMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __NETWORKCODINGMESSAGE_M_H

